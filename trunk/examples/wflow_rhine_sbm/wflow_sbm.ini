[API]
IF=0,1
InwaterMM=2,4
#FirstZoneDepth=2,1
#Latitude=1,5
#Longitude=1,5


# Define the forcings needed for the model here
# the filename is either the name of the pcraster map-stack or the name of the 
# variable in the netcdf input file
[inputmapstacks]
Precipitation = /inmaps/P
EvapoTranspiration = /inmaps/PET
Temperature = /inmaps/TEMP
# this is optional inflow (positive) or outflow (negative) of the kin-wave reservoir
Inflow = /inmaps/IF 

[fit]
parameter_0 = M
#parameter_1 = RootingDepth
Q = testing.tss
ColMeas = [1,8,7]
ColSim = [1,8,7]
WarmUpSteps = 1
areamap=staticmaps/wflow_subcatch.map
areacode=[1,8,7]

[modelparameters]
# Format:
# name=stack,type,default
# example:
# RootingDepth=monthlyclim/ROOT,monthyclim,100

# - name - Name of the parameter (internal variable)
# - stack - Name of the mapstack (representation on disk or in mem) relative to case
# - type - Type of parameter (default = static)
# - default - Default value if map/tbl is not present

#Possible types are::
# - static: Read at startup from map or tbl (not implmented yet)
# - timeseries: read map for each timestep
# - monthlyclim: read a map corresponding to the current month (12 maps in total)
# - dailyclim: read a map corresponding to the current day of the year
# - hourlyclim: read a map corresponding to the current hour of the day (24 in total) (not implemented yet)
#RootingDepth=monthlyclim/ROOTS,monthlyclim,75


[run]
# either a runinfo file or a start and end-time are required
#runinfo=runinfo.xml
starttime= 1995-01-31 00:00:00
endtime= 1995-02-28 00:00:00
# required, base timestep of the model
timestepsecs = 86400
#start model with cold state
reinit=1

# Model parameters and settings
[model]
modeltype= sbm

AnnualDischarge=2290
# Alpha for wiver-width estimation 5 for mountain stream 60 for the river rhine
Alpha=120
ModelSnow=0
ScalarInput=0
InterpolationMethod=inv
WIMaxScale=0.8
Tslice=1
# Maximum upstream distance to update the flow in metres
UpdMaxDist=300000.0
#SubCatchFlowOnly = 1
origTopogLateral = 1


#DynamicVegetation=1

[misc]
#mapSaveInterval=365

[framework]
# outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab

# netcdfoutput requires also outputformat = 1 (default) and additionally the name of the file
#netcdfoutput = outmaps.nc
#netcdfwritebuffer=100

[layout]
# if set to zero the cell-size is given in lat/long (the default)
sizeinmetres = 0




[outputmaps]
#self.Inflow=iflow

#self.WaterDem=wat
#self.SubCellFrac=scf
#self.Inwater=inw
#self.DistToUpdPt=dist
#self.SnowMelt=sno
#self.FirstZoneFlux=fzf
#self.TopoLdd=ldd
self.InwaterMM=iwm
#self.watbal=wat
self.PotenEvap=PET
self.Precipitation=P

[summary]
self.MaxLeakage=MaxLeakage.map
# Save and average these per LU type

[summary_sum]
self.Precipitation=Sumprecip.map

[summary_max]
self.Precipitation=maxprecip.map

[summary_min]
#self.Temperature=mintemp.map

[summary_avg]
self.Precipitation=avgprecip.map

[outputcsv_0]
samplemap=staticmaps/wflow_landuse.map
self.Transfer=tra_lu.csv

# gauge output
[outputtss_0]
samplemap=staticmaps/wflow_gauges.map
self.SurfaceRunoff=run.tss
self.WaterLevel=lev.tss

[outputtss_1]
samplemap=staticmaps/wflow_gauges.map
self.ActLeakage=lek.tss
# Save and sample these at gauge locations

[outputcsv_1]
samplemap=staticmaps/area.map
#samplemap=staticmaps/wflow_subcatch.map

# Alle runoff in mm
self.InwaterMM=specrun.csv


# Neerslag in mm
self.Precipitation=prec.csv

# totale verdamping in mm
self.ActEvap+self.Interception=teact.csv

# Totale storage in mm
self.UStoreDepth + self.FirstZoneDepth + self.CanopyStorage = store.csv

# water budget not taking Delta S and GW flux into account
self.Precipitation - self.ActEvap - self.Interception - self.InwaterMM = watbalnostore.csv

